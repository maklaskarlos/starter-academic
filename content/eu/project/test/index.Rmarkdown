---
# Documentation: https://wowchemy.com/docs/managing-content/

title: "Reporting de ventas con R (Multidivisa)"
summary: ""
authors: []
tags: []
categories: []
date: 2020-11-28T21:20:55+01:00

# Optional external URL for project (replaces project detail page).
external_link: ""

# Featured image
# To use, add an image named `featured.jpg/png` to your page's folder.
# Focal points: Smart, Center, TopLeft, Top, TopRight, Left, Right, BottomLeft, Bottom, BottomRight.
image:
  caption: ""
  focal_point: "Top"
  preview_only: false

# Custom links (optional).
#   Uncomment and edit lines below to show custom links.
# links:
# - name: Follow
#   url: https://twitter.com
#   icon_pack: fab
#   icon: twitter

url_code: ""
url_pdf: ""
url_slides: ""
url_video: ""

# Slides (optional).
#   Associate this project with Markdown slides.
#   Simply enter your slide deck's filename without extension.
#   E.g. `slides = "example-slides"` references `content/slides/example-slides.md`.
#   Otherwise, set `slides = ""`.
slides: ""
---

En empresas internacionales es comun operar con diferentes divisas y consolidar los resultados en una moneda unica.

El **objetivo de este proyecto es la elaboración de un reporte de ventas, automatizado, en Euros, de una empresa que se dedica al transporte de pasajaeros urbanos** y que opera en diferentes ciudades del mundo: con **euros, pesos mexicanos, pesos argentinos, chilenos...**

Para ello dispongo de un **ejemplo** con 52.646 transacciones. 

Para obtener los tipos de cambio tenemos que tener acceso a datos economicos y las librerias de R: **quantmod** y **Quandl** permiten hacerlo.

```{r setup, include=FALSE}
knitr::opts_chunk$set(collapse = TRUE)
```

```{r librerias, message=FALSE, warning=FALSE, echo = TRUE}
library(quantmod)
library(Quandl)
```

```{r librerias I, message=FALSE, warning=FALSE, echo = TRUE}
library(tidyverse)
library(dplyr)
library(kableExtra)
library(reshape)
library(lubridate)
library(ggplot2)
library(scales)
library(tidyquant)
```

Existen **distintas fuentes** y cada una de ella tiene sus particularidades: **Oanda.com** por ejemplo, proporciona datos historicos de 180 días, ¡aunque siempre se puede modificar el argumento de la función (from - to)!

https://finance.yahoo.com/?guccounter=1

https://www.alphavantage.co/

https://fred.stlouisfed.org/

https://www.oanda.com/rw-en/


Como ejemplo sencillo hacemos una llamada a la API del  **Banco Central Europeo (BCE)**, en este caso a traves del paquete de R **quandl()**, para extraer la cotización del dollar con respecto al euro:

```{r getsymbolsIX, message=FALSE, warning=FALSE, echo = FALSE}
# APY KEY para no tener restricciones
Quandl.api_key("KRyskEozdYNyzeRxwXr2")
```

```{r getsymbolsX, message=FALSE, warning=FALSE, echo = TRUE}
# Import EURUSD data from BCE
eurusd<-Quandl(code="ECB/EURUSD")
```

El resultado que proporciona es el siguiente:

```{r getsymbolsXI, message=FALSE, warning=FALSE, echo = FALSE}
# Look at the structure of EURUSD
head(eurusd)%>%
  knitr::kable()%>%
  kable_styling(bootstrap_options = "striped", font_size = 14)
```


```{r proyecto, message=FALSE, warning=FALSE, echo = FALSE}
library(readr)
datos <- read_csv("C:/Users/karlo/OneDrive/Escritorio/Practicas_Karlos/Proyecto CABIFY/prueba_seleccion.csv") %>%
  select(c("journey_id","created_at","currency","price_base","cost_base","region_id"))

datos$ciudad<-"xxx"
datos$ciudad[datos$region_id=="ar_buenos_aires"] = "Buenos Aires"
datos$ciudad[datos$region_id=="barcelona"] = "Barcelona"
datos$ciudad[datos$region_id=="br_rio_de_janeiro"] = "Rio de Janeirol"
datos$ciudad[datos$region_id=="br_sao_paulo"] = "Sao Paulo"
datos$ciudad[datos$region_id=="ec_quito"] = "Quito"
datos$ciudad[datos$region_id=="es_sevilla"] = "Sevilla"
datos$ciudad[datos$region_id=="lima"] = "Lima"
datos$ciudad[datos$region_id=="madrid"] = "Madrid"
datos$ciudad[datos$region_id=="malaga"] = "Malaga"
datos$ciudad[datos$region_id=="mexico"] = "Mexico DF"
datos$ciudad[datos$region_id=="monterrey"] = "Monterrey"
datos$ciudad[datos$region_id=="mx_guadalajara"] = "Guadalajara"
datos$ciudad[datos$region_id=="pt_lisboa"] = "Lisboa"
datos$ciudad[datos$region_id=="puebla"] = "Puebla"
datos$ciudad[datos$region_id=="santiago"] = "Santiago de Chile"
datos$ciudad[datos$region_id=="es_valencia"] = "Valencia"
#summary(datos$ciudad)
datos$ciudad<-as.factor(datos$ciudad)
#summary(datos$ciudad)

datos <- datos %>%
  select(c("journey_id","created_at","currency","price_base","cost_base","ciudad"))
```

Volviendo al ejemplo empresarial con el que estsmos trabajando, las divisas con las que la compañia opera son las siguientes...

```{r proyectoI, message=FALSE, warning=FALSE, echo = FALSE}
unique(datos$currency)
```

...volviendo al dataset, las variables que necesito para medir las ventas son:

```{r proyectoI0, message=FALSE, warning=FALSE, echo = FALSE}
head(datos)%>%
  knitr::kable()%>%
  kable_styling(bootstrap_options = "striped", font_size = 14)
```

Agrupamos las ventas de la compañia por mes...

```{r proyectoI0I, message=FALSE, warning=FALSE, echo = FALSE}

datos$month <- month(datos$created_at)

datos$price_base[is.na(datos$price_base)] <- 0


datos0 <- datos %>%
    # grouping by year and summarizing sales
    group_by(month) %>%
    summarize(sales = sum(price_base)) %>%
    ungroup()

datos0$sales <- format(round(as.numeric(datos0$sales), 1), nsmall=1, big.mark=",")

head(datos0)%>%
  knitr::kable()%>%
  kable_styling(bootstrap_options = "striped", font_size = 14)

```

...pero esto no es lo correcto en estos momentos por que estamos agregando las ventas en diferentes divisas...

Lo importante del proyecto viene a continuación... y lo detallo paso por paso:

1) Preparamos una tabla de fechas

```{r proyectoII, message=FALSE, warning=FALSE, echo = TRUE}

currDF  <- data.frame(
  date = seq.Date(from = as.Date('2017-01-03 13:20:24'), to = as.Date('2017-12-30 09:54:08'), length = 52645),
  variable = datos$currency,
  amount = datos$price_base,stringsAsFactors=FALSE)


currDF = currDF %>% mutate(aniomes = paste(year(date),month(date)))

currDF$divisaaniomes<-paste(currDF$variable,currDF$aniomes)
```

2) Los datos que tenemos son del 2017, marcamos los limites y el formato de los datos

```{r proyectoIV, message=FALSE, warning=FALSE, echo = TRUE}
#tipos de cambio historicos de 2017
startDt = as.Date("2017-01-03 13:20:24")
endDt = as.Date("2017-12-30 09:54:08")
currCombinations = paste(setdiff(unique(currDF$variable),"EUR"),"EUR=X",sep="")
```

3) Extraemos la cotiación de las divisas desde **yahoo** con la función **getSymbols()**. Y alimentamos la tabla.

Asegurarse de tener Internet al ejecutar este codigo.

```{r proyectoV, message=FALSE, warning=FALSE, echo = TRUE}
fxData = do.call(merge.xts,lapply(currCombinations,function(x)
  getSymbols.yahoo(x, src="yahoo", from=startDt,to=endDt,auto.assign=FALSE)[,4])) #make sure you have internet
colnames(fxData) = gsub("EUR.X.Close","",colnames(fxData))
fxData$EUR = 1
```

4) Calculamos la media de la cotización de cada divisa durante cada mez: **tipo de cambio medio de cada mes y de cada divisa**. (¡ojo! si el reporting es **anual**, podemos modificar la formula)

```{r proyectoVI, message=FALSE, warning=FALSE, echo = TRUE}
fxData_DF = data.frame(date=index(fxData),coredata(fxData),stringsAsFactors=FALSE)
fxMolten = melt(fxData_DF,id="date",variable.name="currency",value.name="conversionFactor")

#creamos la columna aniomes para poder calcular el tipo de cambio medio de cada mes
fxMolten = fxMolten %>% mutate(aniomes = paste(year(date),month(date)))

fxMolten %>% group_by(aniomes, variable) %>% summarise(amountmedia = mean(value))
#eliminamos NAs
fxMolten<-fxMolten[complete.cases(fxMolten), ] #desaparecen algunas lineas
fxMolten %>% group_by(aniomes, variable) %>% summarise(amountmedia = mean(value))
#creamos la columna divisaaniomes para poder calcular el tipo de cambio medio de cada mes
fxMolten$divisaaniomes<-paste(fxMolten$variable,fxMolten$aniomes)
tipocamiomedio= fxMolten %>% group_by(divisaaniomes, variable) %>% summarise(amountmedia = mean(value))
#mergeamos con datoscabify
datos = datos %>% mutate(aniomes = paste(year(created_at),month(created_at)))
datos$divisaaniomes<-paste(datos$currency,datos$aniomes)
datosdivisa = merge(datos,tipocamiomedio, by= "divisaaniomes")
#hacemos la conversion de nuestras variables economicas
datosdivisa$price_base_EUR<-datosdivisa$price_base*datosdivisa$amountmedia
datosdivisa$cost_base_EUR<-datosdivisa$cost_base*datosdivisa$amountmedia

datos1 <- inner_join(datos,datosdivisa, by= "journey_id")
```

5) Incorporamos las columnas de coste y facturación en euros

```{r proyectoVIII, message=FALSE, warning=FALSE, echo = FALSE}
datos1 = datos1[,c("journey_id","created_at.x","currency.x","price_base.x","cost_base.x","price_base_EUR","cost_base_EUR","ciudad.x")]
#visualizo nuestra nueva tabla
head(datos1)%>%
  knitr::kable()%>%
  kable_styling(bootstrap_options = "striped", font_size = 12)
```

Ahora que tenemos los datos en euros, vuelvo agrupar los resultados de las ventas por mes

```{r proyectoVIIII, message=FALSE, warning=FALSE, echo = TRUE}
#str(datosdivisa$created_at)

datos1$price_base_EUR[is.na(datos1$price_base_EUR)] <- 0

datos1$month <- month(datos1$created_at.x)


datos2 <- datos1 %>%
    # group by year and summarizing sales
    group_by(month) %>%
    summarize(sales = sum(price_base_EUR)) %>%
    ungroup()

datos2$sales <- format(round(as.numeric(datos2$sales), 1), nsmall=1, big.mark=",")

datos2%>%
    knitr::kable()%>%
    kable_styling(bootstrap_options = "striped", font_size = 14)

```

Estan facturando alrededor de 91 millones de euros anuales. Quiero ver las cifras por ciudades...

```{r proyectoVV, message=FALSE, warning=FALSE, echo = FALSE}

datos2 <- datos1 %>%
  select(c("ciudad.x","created_at.x","price_base_EUR")) %>%
  mutate(week= week(created_at.x))

datos3 <- datos2 %>%
  group_by(ciudad.x) %>%
  summarize(sales = sum(price_base_EUR)) %>%
  arrange() %>%
  ungroup()

datos3$sales <- round(datos3$sales,2)

datos3[is.na(datos3)] <- 0

theme_set(theme_bw())

# Plot
ciudades <- ggplot(datos3, aes(x=ciudad.x, y=sales)) +
  geom_point(size=3) +
  geom_segment(aes(x=ciudad.x,
                   xend=ciudad.x,
                   y=0,
                   yend=sales)) +
  labs(title="Facturación por ciudades",
       subtitle="ventas vs ciudades",
       caption="source: private") +
  theme(axis.text.x = element_text(angle=65, vjust=0.6)) +
  scale_y_continuous(labels = comma)

```

Parece que Madrid es una ciudad muy importante para la compañia...

![](images/proyectoVV-1.png)

Quiero ver como vende la empresa en Madrid semana a semana...

```{r proyectoVVI, message=FALSE, warning=FALSE, echo = FALSE}

datos4 <- datos1 %>%
  select(c("ciudad.x","created_at.x","price_base_EUR")) %>%
  mutate(week= week(created_at.x))

datos5 <- datos4 %>%
  group_by(week,ciudad.x) %>%
  summarize(sales = sum(price_base_EUR)) %>%
  arrange() %>%
  ungroup()

datos5$sales <- round(datos5$sales,2)

datos6 <- spread(datos5, key= ciudad.x, value= sales)

datos6[is.na(datos6)] <- 0

madrid <- datos6 %>%
  select(c("week","Madrid"))


theme_set(theme_bw())

# Draw plot
madrid <- ggplot(madrid, aes(x=week, y=Madrid)) +
  geom_bar(stat="identity", width=.5, fill="tomato3") +
  labs(title="Sales in Madrid",
       subtitle="Week Number Vs Sales",
       caption="source: private") +
  theme(axis.text.x = element_text(angle=65, vjust=0.6))+
  scale_y_continuous(labels = comma)

```

![](images/proyectoVVI-1.png)
